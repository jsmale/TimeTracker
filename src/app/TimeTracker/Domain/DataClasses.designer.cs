#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeTracker.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TimeTracker")]
	public partial class LinqToSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(TimeTracker.Domain.Project instance);
    partial void UpdateProject(TimeTracker.Domain.Project instance);
    partial void DeleteProject(TimeTracker.Domain.Project instance);
    partial void InsertWorkItem(TimeTracker.Domain.WorkItem instance);
    partial void UpdateWorkItem(TimeTracker.Domain.WorkItem instance);
    partial void DeleteWorkItem(TimeTracker.Domain.WorkItem instance);
    partial void InsertProjectTaskType(TimeTracker.Domain.ProjectTaskType instance);
    partial void UpdateProjectTaskType(TimeTracker.Domain.ProjectTaskType instance);
    partial void DeleteProjectTaskType(TimeTracker.Domain.ProjectTaskType instance);
    partial void InsertTask(TimeTracker.Domain.Task instance);
    partial void UpdateTask(TimeTracker.Domain.Task instance);
    partial void DeleteTask(TimeTracker.Domain.Task instance);
    partial void InsertTaskType(TimeTracker.Domain.TaskType instance);
    partial void UpdateTaskType(TimeTracker.Domain.TaskType instance);
    partial void DeleteTaskType(TimeTracker.Domain.TaskType instance);
    partial void InsertTimeEntry(TimeTracker.Domain.TimeEntry instance);
    partial void UpdateTimeEntry(TimeTracker.Domain.TimeEntry instance);
    partial void DeleteTimeEntry(TimeTracker.Domain.TimeEntry instance);
    partial void InsertUser(TimeTracker.Domain.User instance);
    partial void UpdateUser(TimeTracker.Domain.User instance);
    partial void DeleteUser(TimeTracker.Domain.User instance);
    #endregion
		
		public LinqToSqlDataContext() : 
				base(global::TimeTracker.Properties.Settings.Default.TimeTrackerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.Project> Projects
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.Project>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.WorkItem> WorkItems
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.WorkItem>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.ProjectTaskType> ProjectTaskTypes
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.ProjectTaskType>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.Task> Tasks
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.Task>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.TaskType> TaskTypes
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.TaskType>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.TimeEntry> TimeEntries
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.TimeEntry>();
			}
		}
		
		public System.Data.Linq.Table<TimeTracker.Domain.User> Users
		{
			get
			{
				return this.GetTable<TimeTracker.Domain.User>();
			}
		}
	}
}
namespace TimeTracker.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _ProjectCode;
		
		private EntitySet<ProjectTaskType> _ProjectTaskTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProjectCodeChanging(string value);
    partial void OnProjectCodeChanged();
    #endregion
		
		public Project()
		{
			this._ProjectTaskTypes = new EntitySet<ProjectTaskType>(new Action<ProjectTaskType>(this.attach_ProjectTaskTypes), new Action<ProjectTaskType>(this.detach_ProjectTaskTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(35)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCode", DbType="NVarChar(255)")]
		public string ProjectCode
		{
			get
			{
				return this._ProjectCode;
			}
			set
			{
				if ((this._ProjectCode != value))
				{
					this.OnProjectCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjectCode = value;
					this.SendPropertyChanged("ProjectCode");
					this.OnProjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskType", Storage="_ProjectTaskTypes", ThisKey="Id", OtherKey="Project_id")]
		public EntitySet<ProjectTaskType> ProjectTaskTypes
		{
			get
			{
				return this._ProjectTaskTypes;
			}
			set
			{
				this._ProjectTaskTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkItem")]
	public partial class WorkItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _ProjectTaskType_id;
		
		private System.Guid _User_id;
		
		private EntitySet<TimeEntry> _TimeEntries;
		
		private EntityRef<ProjectTaskType> _ProjectTaskType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProjectTaskType_idChanging(System.Guid value);
    partial void OnProjectTaskType_idChanged();
    partial void OnUser_idChanging(System.Guid value);
    partial void OnUser_idChanged();
    #endregion
		
		public WorkItem()
		{
			this._TimeEntries = new EntitySet<TimeEntry>(new Action<TimeEntry>(this.attach_TimeEntries), new Action<TimeEntry>(this.detach_TimeEntries));
			this._ProjectTaskType = default(EntityRef<ProjectTaskType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTaskType_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectTaskType_id
		{
			get
			{
				return this._ProjectTaskType_id;
			}
			set
			{
				if ((this._ProjectTaskType_id != value))
				{
					if (this._ProjectTaskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTaskType_idChanging(value);
					this.SendPropertyChanging();
					this._ProjectTaskType_id = value;
					this.SendPropertyChanged("ProjectTaskType_id");
					this.OnProjectTaskType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkItem_TimeEntry", Storage="_TimeEntries", ThisKey="Id", OtherKey="WorkItem_id")]
		public EntitySet<TimeEntry> TimeEntries
		{
			get
			{
				return this._TimeEntries;
			}
			set
			{
				this._TimeEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTaskType_WorkItem", Storage="_ProjectTaskType", ThisKey="ProjectTaskType_id", OtherKey="Id", IsForeignKey=true)]
		public ProjectTaskType ProjectTaskType
		{
			get
			{
				return this._ProjectTaskType.Entity;
			}
			set
			{
				ProjectTaskType previousValue = this._ProjectTaskType.Entity;
				if (((previousValue != value) 
							|| (this._ProjectTaskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectTaskType.Entity = null;
						previousValue.WorkItems.Remove(this);
					}
					this._ProjectTaskType.Entity = value;
					if ((value != null))
					{
						value.WorkItems.Add(this);
						this._ProjectTaskType_id = value.Id;
					}
					else
					{
						this._ProjectTaskType_id = default(System.Guid);
					}
					this.SendPropertyChanged("ProjectTaskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkItem", Storage="_User", ThisKey="User_id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WorkItems.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WorkItems.Add(this);
						this._User_id = value.Id;
					}
					else
					{
						this._User_id = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeEntries(TimeEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkItem = this;
		}
		
		private void detach_TimeEntries(TimeEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTaskType")]
	public partial class ProjectTaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _Project_id;
		
		private System.Guid _Task_id;
		
		private System.Guid _Type_id;
		
		private EntitySet<WorkItem> _WorkItems;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<TaskType> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProject_idChanging(System.Guid value);
    partial void OnProject_idChanged();
    partial void OnTask_idChanging(System.Guid value);
    partial void OnTask_idChanged();
    partial void OnType_idChanging(System.Guid value);
    partial void OnType_idChanged();
    #endregion
		
		public ProjectTaskType()
		{
			this._WorkItems = new EntitySet<WorkItem>(new Action<WorkItem>(this.attach_WorkItems), new Action<WorkItem>(this.detach_WorkItems));
			this._Project = default(EntityRef<Project>);
			this._Task = default(EntityRef<Task>);
			this._Type = default(EntityRef<TaskType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Project_id
		{
			get
			{
				return this._Project_id;
			}
			set
			{
				if ((this._Project_id != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_idChanging(value);
					this.SendPropertyChanging();
					this._Project_id = value;
					this.SendPropertyChanged("Project_id");
					this.OnProject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Task_id
		{
			get
			{
				return this._Task_id;
			}
			set
			{
				if ((this._Task_id != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask_idChanging(value);
					this.SendPropertyChanging();
					this._Task_id = value;
					this.SendPropertyChanged("Task_id");
					this.OnTask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Type_id
		{
			get
			{
				return this._Type_id;
			}
			set
			{
				if ((this._Type_id != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType_idChanging(value);
					this.SendPropertyChanging();
					this._Type_id = value;
					this.SendPropertyChanged("Type_id");
					this.OnType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTaskType_WorkItem", Storage="_WorkItems", ThisKey="Id", OtherKey="ProjectTaskType_id")]
		public EntitySet<WorkItem> WorkItems
		{
			get
			{
				return this._WorkItems;
			}
			set
			{
				this._WorkItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskType", Storage="_Project", ThisKey="Project_id", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTaskTypes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskTypes.Add(this);
						this._Project_id = value.Id;
					}
					else
					{
						this._Project_id = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskType", Storage="_Task", ThisKey="Task_id", OtherKey="Id", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.ProjectTaskTypes.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskTypes.Add(this);
						this._Task_id = value.Id;
					}
					else
					{
						this._Task_id = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_ProjectTaskType", Storage="_Type", ThisKey="Type_id", OtherKey="Id", IsForeignKey=true)]
		public TaskType Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				TaskType previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.ProjectTaskTypes.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskTypes.Add(this);
						this._Type_id = value.Id;
					}
					else
					{
						this._Type_id = default(System.Guid);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTaskType = this;
		}
		
		private void detach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTaskType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _TaskCode;
		
		private EntitySet<ProjectTaskType> _ProjectTaskTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTaskCodeChanging(string value);
    partial void OnTaskCodeChanged();
    #endregion
		
		public Task()
		{
			this._ProjectTaskTypes = new EntitySet<ProjectTaskType>(new Action<ProjectTaskType>(this.attach_ProjectTaskTypes), new Action<ProjectTaskType>(this.detach_ProjectTaskTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskCode", DbType="NVarChar(255)")]
		public string TaskCode
		{
			get
			{
				return this._TaskCode;
			}
			set
			{
				if ((this._TaskCode != value))
				{
					this.OnTaskCodeChanging(value);
					this.SendPropertyChanging();
					this._TaskCode = value;
					this.SendPropertyChanged("TaskCode");
					this.OnTaskCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskType", Storage="_ProjectTaskTypes", ThisKey="Id", OtherKey="Task_id")]
		public EntitySet<ProjectTaskType> ProjectTaskTypes
		{
			get
			{
				return this._ProjectTaskTypes;
			}
			set
			{
				this._ProjectTaskTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTypes")]
	public partial class TaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _TypeCode;
		
		private EntitySet<ProjectTaskType> _ProjectTaskTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeCodeChanging(string value);
    partial void OnTypeCodeChanged();
    #endregion
		
		public TaskType()
		{
			this._ProjectTaskTypes = new EntitySet<ProjectTaskType>(new Action<ProjectTaskType>(this.attach_ProjectTaskTypes), new Action<ProjectTaskType>(this.detach_ProjectTaskTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCode", DbType="NVarChar(255)")]
		public string TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_ProjectTaskType", Storage="_ProjectTaskTypes", ThisKey="Id", OtherKey="Type_id")]
		public EntitySet<ProjectTaskType> ProjectTaskTypes
		{
			get
			{
				return this._ProjectTaskTypes;
			}
			set
			{
				this._ProjectTaskTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_ProjectTaskTypes(ProjectTaskType entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeEntry")]
	public partial class TimeEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Guid _WorkItem_id;
		
		private EntityRef<WorkItem> _WorkItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnWorkItem_idChanging(System.Guid value);
    partial void OnWorkItem_idChanged();
    #endregion
		
		public TimeEntry()
		{
			this._WorkItem = default(EntityRef<WorkItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkItem_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkItem_id
		{
			get
			{
				return this._WorkItem_id;
			}
			set
			{
				if ((this._WorkItem_id != value))
				{
					if (this._WorkItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkItem_idChanging(value);
					this.SendPropertyChanging();
					this._WorkItem_id = value;
					this.SendPropertyChanged("WorkItem_id");
					this.OnWorkItem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkItem_TimeEntry", Storage="_WorkItem", ThisKey="WorkItem_id", OtherKey="Id", IsForeignKey=true)]
		public WorkItem WorkItem
		{
			get
			{
				return this._WorkItem.Entity;
			}
			set
			{
				WorkItem previousValue = this._WorkItem.Entity;
				if (((previousValue != value) 
							|| (this._WorkItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkItem.Entity = null;
						previousValue.TimeEntries.Remove(this);
					}
					this._WorkItem.Entity = value;
					if ((value != null))
					{
						value.TimeEntries.Add(this);
						this._WorkItem_id = value.Id;
					}
					else
					{
						this._WorkItem_id = default(System.Guid);
					}
					this.SendPropertyChanged("WorkItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Username;
		
		private EntitySet<WorkItem> _WorkItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public User()
		{
			this._WorkItems = new EntitySet<WorkItem>(new Action<WorkItem>(this.attach_WorkItems), new Action<WorkItem>(this.detach_WorkItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(255)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkItem", Storage="_WorkItems", ThisKey="Id", OtherKey="User_id")]
		public EntitySet<WorkItem> WorkItems
		{
			get
			{
				return this._WorkItems;
			}
			set
			{
				this._WorkItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
